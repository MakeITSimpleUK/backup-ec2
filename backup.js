// Generated by CoffeeScript 1.9.3
(function() {
  var config, dateFormat;

  config = require('./config');

  dateFormat = require('dateformat');

  console.log(new Date);

  config.clients.forEach(function(client) {
    var AWS, myEC2, params;
    AWS = require('aws-sdk');
    AWS.config.update({
      accessKeyId: client.accessKey,
      secretAccessKey: client.secretKey,
      region: client.region
    });
    myEC2 = new AWS.EC2;
    params = {
      Owners: ['self'],
      Filters: [
        {
          Name: 'tag-key',
          Values: ['mis-ami-backup']
        }
      ]
    };
    myEC2.describeImages(params, function(err, data) {
      if (!err) {
        return data.Images.forEach(function(image) {
          if (Date.parse(image.CreationDate) < Date.now() - (client.daysToKeep * 24 * 60 * 60 * 1000)) {
            console.log('Deleting image ' + image.Name);
            params = {
              ImageId: image.ImageId
            };
            return myEC2.deregisterImage(params, function(err, data) {
              if (!err) {
                return console.log('Successfully deleted');
              } else {
                return console.log('Delete failed: ' + err);
              }
            });
          }
        });
      } else {
        return console.log('Error: ' + err);
      }
    });
    return myEC2.describeInstances(function(err, reservations) {
      if (!err) {
        console.dir(reservations);
        return reservations.Reservations.forEach(function(reservation) {
          return reservation.Instances.forEach(function(instance) {
            var imageName, isExcluded, name, now;
            name = '';
            isExcluded = false;
            instance.Tags.forEach(function(tag) {
              if (tag.Key === 'Name') {
                name = tag.Value;
              }
              if (tag.Key === 'mis-ami-backup-excluded' && tag.Value === 'true') {
                isExcluded = true;
                console.log('Instance ' + name + ' excluded from backup');
              }
            });
            if (!isExcluded) {
              now = new Date;
              imageName = name + ' - ' + dateFormat(now, 'yyyy-mm-dd');
              console.log('Name: ' + imageName);
              params = {
                InstanceId: instance.InstanceId,
                Name: imageName,
                NoReboot: true
              };
              return myEC2.createImage(params, function(err, data) {
                if (!err) {
                  console.log('Instance ' + name + ' successfully backed up');
                  console.dir(data);
                  params = {
                    Resources: [data.ImageId],
                    Tags: [
                      {
                        Key: 'mis-ami-backup',
                        Value: 'true'
                      }
                    ]
                  };
                  return myEC2.createTags(params, function(err, data) {
                    if (!err) {
                      return console.log('Successfully tagged the image for ' + name);
                    } else {
                      return console.log('Tagging failed for ' + name + ': ' + err);
                    }
                  });
                } else {
                  return console.log('Backup failed for ' + name + '. Reason: ' + err);
                }
              });
            }
          });
        });
      } else {
        return console.log('Error: ' + err);
      }
    });
  });

}).call(this);
